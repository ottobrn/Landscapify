// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "LandscapifyStructLibrary.h"
#include "GameFramework/Actor.h"
#include "LandscapeActor.generated.h"

/* TODO:
 * 1. Need to remove actor class and move all of this logic into LandscapeTool manager
 * 2. Since landscape actor wont create a procedural meshes with generated height map, need to create a editor tool with FLandscapeParameters
 *	  to be able to create landscape from editor.
 * 3. As I mentioned before I've given up on creating procedural mesh and favored unreal landscape actor. So after generating a height map,
 *    it have create an landscape with given texture.
 * 4. Parallelize Diamond square algorithm if its possible (it can crash with 8K map:3)
 * 5. Add smoothing for Diamond square
 * 6. I have read about erosion simulation, soo it will be a good idea to implement
 * 7. Lakes and rivers!!
 * 8. CAN YOU FINALLY FIX THE RANDOMNESS FOR PERLIN NOISE???
 */

UCLASS()
class LANDSCAPIFY_API ALandscapeActor : public AActor
{
	GENERATED_BODY()

public:
	ALandscapeActor();

protected:
	virtual void BeginPlay() override;

public:
	UFUNCTION(BlueprintCallable, CallInEditor, Category = "Landscape Actor")
	void GenerateLandscape();

private:
	/**
	 * Generates the height map by populating the vertices array.
	 */
	void GenerateHeightMap(TArray<FVector>& OutVertices);

	/**
	 * Randomizes the initial corner points of the height map for algorithms like Diamond-Square.
	 * @param OutVertices: Array of vertex positions that will have random initial values.
	 */
	void RandomizeInitPoint(TArray<FVector>& OutVertices);

	/**
	 * Updates the landscape mesh section based on the provided section data.
	 * @param InSection: Contains data such as vertices and indices that define a mesh section.
	 */
	void UpdateLandscapeSection(FMeshSectionData& InSection);

	/**
	 * Executes a single step of the Diamond-Square algorithm on the landscape mesh.
	 * @param SectionData: Contains mesh data for the landscape section being modified.
	 * @param CurrentStep: Defines the current level of detail in the Diamond-Square iteration.
	 * @param Scale: Factor to control the vertical scaling of the height variation in this step.
	 */
	void DiamondSquareStep(FMeshSectionData& SectionData, int32 CurrentStep, float Scale);

	/**
	 * Generates the height map using the Perlin noise algorithm and updates the section data.
	 * @param SectionData: Contains the mesh data that will be modified by the Perlin noise algorithm.
	 */
	void PerlinNoise(FMeshSectionData& SectionData);

	/**
	 * Generates an image representation of the height map for debugging or visualization purposes.
	 * @param SectionData: The data of the mesh section that will be used to create the height map image.
	 */
	void GenerateHeightMapImage(const FMeshSectionData& SectionData);

	/**
	 * Creates and saves a texture representing the height map generated by the landscape algorithms.
	 * @param TextureData: Array of 16-bit values representing the height map, used to create the texture.
	 */
	void CreateAndSaveHeightMapTexture(const TArray<uint16>& TextureData);
	
	float GetPerlinNoiseValue(float X, float Y);

protected:
	UPROPERTY(EditAnywhere, BlueprintReadOnly)
	FLandscapeParameters LandscapeSettings;

protected:
	UPROPERTY()
	int32 LandscapeSize = 0;
};
